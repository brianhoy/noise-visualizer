!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="/",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";var ChunkGenerator_1=__webpack_require__(1);self.importScripts("public/scripts/vendor/three.min.js","public/scripts/vendor/simplex.js");var ChunkGeneratorWorker=function(){function ChunkGeneratorWorker(){var _this=this;this.chunkGenerator=new ChunkGenerator_1.ChunkGenerator(1e3,10,null),self.onmessage=function(event){switch(event.data.type){case"generateChunks":_this.generateChunks(event.data.data);break;case"setGeneratorSettings":var chunkSize=event.data.data.chunkSize;_this.chunkGenerator.chunkSize=chunkSize}}}return ChunkGeneratorWorker.prototype.generateChunks=function(chunkCoords){for(var chunks=new Array,_i=0,chunkCoords_1=chunkCoords;_i<chunkCoords_1.length;_i++){var chunkCoord=chunkCoords_1[_i],geometryData=this.chunkGenerator.generateChunkGeometryData(chunkCoord);chunks.push({coords:[chunkCoord.x,chunkCoord.y],geometryData:geometryData})}return chunks},ChunkGeneratorWorker}();new ChunkGeneratorWorker;console.log("ChunkGenerator.worker loaded")},function(module,exports,__webpack_require__){"use strict";var Chunk_1=__webpack_require__(2),ChunkGenerator=function(){function ChunkGenerator(chunkSize,segments,noiseGenerator){this.chunkSize=chunkSize,this.segments=segments,this.noiseGenerator=noiseGenerator,this.groundMaterial=new THREE.MeshLambertMaterial}return ChunkGenerator.prototype.generateChunk=function(chunkCoords){for(var realCoords=new THREE.Vector3(chunkCoords.x*this.chunkSize,0,chunkCoords.y*this.chunkSize),geometry=new THREE.PlaneBufferGeometry(this.chunkSize,this.chunkSize,this.segments,this.segments),vertices=geometry.attributes.position.array,i=2;i<vertices.length;i+=3){var noiseCoords=new THREE.Vector2((realCoords.x+vertices[i-2])/5e3,(-realCoords.z+vertices[i-1])/5e3);vertices[i]+=this.noiseGenerator.noise(noiseCoords.x,noiseCoords.y)}console.log("vertices[1] = ",vertices[1]),geometry.computeVertexNormals(),geometry.rotateX(-Math.PI/2),geometry.translate(realCoords.x,0,realCoords.z);var mesh=new THREE.Mesh(geometry,this.groundMaterial);return mesh.receiveShadow=!0,new Chunk_1.Chunk(mesh,chunkCoords)},ChunkGenerator.prototype.generateChunkGeometryData=function(chunkCoords){var geometryData={},realCoords=new THREE.Vector3(chunkCoords.x*this.chunkSize,0,chunkCoords.y*this.chunkSize),geometry=new THREE.PlaneBufferGeometry(this.chunkSize,this.chunkSize,this.segments,this.segments);geometryData.vertices=geometry.attributes.position.array,geometryData.normal=geometry.attributes.normal.array,geometryData.uv=geometry.attributes.uv.array,geometryData.indices=geometry.getIndex().array;for(var i=2;i<geometryData.vertices.length;i+=3){var noiseCoords=new THREE.Vector2((realCoords.x+geometryData.vertices[i-2])/5e3,(-realCoords.z+geometryData.vertices[i-1])/5e3);geometryData.vertices[i]+=1e3*this.noiseGenerator.noise(noiseCoords.x,+noiseCoords.y)}return geometryData},ChunkGenerator.prototype.generateChunkFromGeometryData=function(chunkCoords,geometryData){var realCoords=new THREE.Vector3(chunkCoords.x*this.chunkSize,0,chunkCoords.y*this.chunkSize),geometry=new THREE.BufferGeometry;geometry.setIndex(new THREE.BufferAttribute(geometryData.indices,1)),geometry.addAttribute("position",new THREE.BufferAttribute(geometryData.vertices,3)),geometry.addAttribute("normal",new THREE.BufferAttribute(geometryData.normal,3)),geometry.addAttribute("uv",new THREE.BufferAttribute(geometryData.uvs,2)),geometry.computeVertexNormals(),geometry.rotateX(-Math.PI/2),geometry.translate(realCoords.x,0,realCoords.z);var mesh=new THREE.Mesh(geometry,this.groundMaterial);mesh.receiveShadow=!0;var chunk=new Chunk_1.Chunk(mesh,chunkCoords);return chunk},ChunkGenerator.prototype.setChunkSize=function(newChunkSize){this.chunkSize=newChunkSize},ChunkGenerator.prototype.setSegments=function(newSegments){this.segments=newSegments},ChunkGenerator.prototype.setNoiseGenerator=function(newNoise){this.noiseGenerator=newNoise},ChunkGenerator.prototype.fastSigmoid=function(x){return x/(1+Math.abs(x))},ChunkGenerator}();exports.ChunkGenerator=ChunkGenerator},function(module,exports){"use strict";var Chunk=function(){function Chunk(mesh,chunkCoordinates){this.mesh=mesh,this.chunkCoordinates=chunkCoordinates}return Chunk}();exports.Chunk=Chunk}]);
//# sourceMappingURL=c6af69ab3b60999b3a45.worker.js.map